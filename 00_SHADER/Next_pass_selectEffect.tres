[gd_resource type="VisualShader" load_steps=6 format=3 uid="uid://b2vtcihbo73bk"]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_fy6wi"]
parameter_name = "Effect_color"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_wtx87"]
parameter_name = "Opacity"
hint = 1

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_xqugf"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_opw82"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_wnhfu"]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform vec4 Effect_color : source_color;
uniform float Opacity : hint_range(0, 1);
global uniform float Dither_size;



void fragment() {
// ColorParameter:2
	vec4 n_out2p0 = Effect_color;


// FloatParameter:3
	float n_out3p0 = Opacity;


// FloatParameter:4
	float n_out4p0 = Dither_size;


	float n_out5p0;
// Expression:5
	n_out5p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out4p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out5p0 = n_out3p0 - DITHER_THRESHOLDS[index];
	}


// Step:6
	float n_in6p0 = 0.00000;
	float n_out6p0 = step(n_in6p0, n_out5p0);


// Output:0
	ALBEDO = vec3(n_out2p0.xyz);
	ALPHA = n_out6p0;


}
"
graph_offset = Vector2(-640.346, -131.664)
flags/unshaded = true
nodes/fragment/0/position = Vector2(400, 160)
nodes/fragment/2/node = SubResource("VisualShaderNodeColorParameter_fy6wi")
nodes/fragment/2/position = Vector2(-140, 60)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatParameter_wtx87")
nodes/fragment/3/position = Vector2(-1340, 380)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatParameter_xqugf")
nodes/fragment/4/position = Vector2(-1360, 720)
nodes/fragment/5/node = SubResource("VisualShaderNodeExpression_opw82")
nodes/fragment/5/position = Vector2(-860, 400)
nodes/fragment/5/size = Vector2(724.789, 654.559)
nodes/fragment/5/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/5/output_ports = "0,0,Dither_Node;"
nodes/fragment/5/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/6/node = SubResource("VisualShaderNodeStep_wnhfu")
nodes/fragment/6/position = Vector2(20, 340)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0, 4, 0, 5, 1, 3, 0, 5, 0, 5, 0, 6, 1, 6, 0, 0, 1)
