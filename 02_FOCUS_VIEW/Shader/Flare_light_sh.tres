[gd_resource type="VisualShader" load_steps=8 format=3 uid="uid://bad52w03qa3g4"]

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_ywtfc"]
parameter_name = "Texture"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_333kp"]
source = 5

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_nhoqe"]
parameter_name = "Light_color"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_wx05f"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_ab7m3"]
constant = 1.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_4do37"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_gt4rl"]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded, shadows_disabled, ambient_light_disabled;

uniform vec4 Light_color : source_color;
uniform sampler2D Texture;
global uniform float Dither_size;



void fragment() {
// ColorParameter:4
	vec4 n_out4p0 = Light_color;


	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(Texture, UV);


// FloatConstant:6
	float n_out6p0 = 1.000000;


// FloatParameter:5
	float n_out5p0 = Dither_size;


	float n_out7p0;
// Expression:7
	n_out7p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out5p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out7p0 = n_out6p0 - DITHER_THRESHOLDS[index];
	}


// Step:8
	float n_out8p0 = step(n_out3p0.x, n_out7p0);


// Output:0
	ALBEDO = vec3(n_out4p0.xyz);
	ALPHA = n_out8p0;


}
"
modes/depth_draw = 1
flags/unshaded = true
flags/shadows_disabled = true
flags/ambient_light_disabled = true
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture2DParameter_ywtfc")
nodes/fragment/2/position = Vector2(-1260, 140)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_333kp")
nodes/fragment/3/position = Vector2(-800, 260)
nodes/fragment/4/node = SubResource("VisualShaderNodeColorParameter_nhoqe")
nodes/fragment/4/position = Vector2(31.1, 12.8)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatParameter_wx05f")
nodes/fragment/5/position = Vector2(-1360, 880)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatConstant_ab7m3")
nodes/fragment/6/position = Vector2(-1300, 660)
nodes/fragment/7/node = SubResource("VisualShaderNodeExpression_4do37")
nodes/fragment/7/position = Vector2(-980, 520)
nodes/fragment/7/size = Vector2(724.789, 654.559)
nodes/fragment/7/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/7/output_ports = "0,0,Dither_Node;"
nodes/fragment/7/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/8/node = SubResource("VisualShaderNodeStep_gt4rl")
nodes/fragment/8/position = Vector2(0, 380)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 2, 4, 0, 0, 0, 5, 0, 7, 1, 6, 0, 7, 0, 3, 0, 8, 0, 7, 0, 8, 1, 8, 0, 0, 1)
