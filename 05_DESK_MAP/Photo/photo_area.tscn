[gd_scene load_steps=44 format=3 uid="uid://uwg2qc3svu11"]

[ext_resource type="Texture2D" uid="uid://b53qm3tqli424" path="res://05_DESK_MAP/IMG/Lighthouse.png" id="1_sep4e"]

[sub_resource type="QuadMesh" id="QuadMesh_1i4du"]

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_u7na4"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_3jpth"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_2calb"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ray7x"]
source = 5

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_h3fqg"]
parameter_name = "t_render"
texture_type = 1

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_gvayx"]
function = 31

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_pifcj"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.93, 0.93, 0.93)]
op_type = 3

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_ljemy"]
parameter_name = "BlueNoise"
qualifier = 1
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_c807e"]
source = 5

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_g0kx6"]
function = 1

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_n2jf0"]
constant = 1.0

[sub_resource type="Curve" id="Curve_hdybo"]
_data = [Vector2(0.301887, 0.0430697), 0.0, 0.0, 0, 0, Vector2(1, 1), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_8v5t4"]
curve = SubResource("Curve_hdybo")

[sub_resource type="VisualShaderNodeCurveTexture" id="VisualShaderNodeCurveTexture_bik3t"]
texture = SubResource("CurveTexture_8v5t4")

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_hlg78"]
constant = 0.985

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_h1fb8"]
parameter_name = "Main_color"

[sub_resource type="VisualShader" id="VisualShader_f12d4"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform sampler2D t_render : source_color;
uniform vec4 Main_color : source_color;
global uniform sampler2D BlueNoise : repeat_enable;
uniform sampler2D curve_frg_38 : repeat_disable;



void fragment() {
	vec4 n_out2p0;
// Texture2D:2
	n_out2p0 = texture(t_render, UV);


// ColorParameter:9
	vec4 n_out9p0 = Main_color;


// FloatConstant:37
	float n_out37p0 = 1.000000;


// UVFunc:36
	vec2 n_in36p2 = vec2(0.00000, 0.00000);
	vec2 n_out36p0 = (UV - n_in36p2) * vec2(n_out37p0) + n_in36p2;


	vec4 n_out35p0;
// Texture2D:35
	n_out35p0 = texture(BlueNoise, n_out36p0);


// Step:11
	float n_out11p0 = step(n_out2p0.x, n_out35p0.x);


// FloatFunc:32
	float n_out32p0 = 1.0 - n_out11p0;


// CurveTexture:38
	float n_out38p0 = texture(curve_frg_38, vec2(n_out32p0)).r;


// Mix:33
	vec3 n_out33p0 = mix(vec3(n_out2p0.xyz), vec3(n_out9p0.xyz), vec3(n_out38p0));


// Output:0
	ALBEDO = n_out33p0;


}
"
graph_offset = Vector2(-508.466, -153.42)
flags/unshaded = true
nodes/fragment/0/position = Vector2(1300, 160)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture_ray7x")
nodes/fragment/2/position = Vector2(-160, 20)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture2DParameter_h3fqg")
nodes/fragment/3/position = Vector2(-540, -160)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatConstant_hlg78")
nodes/fragment/7/position = Vector2(-2660, 500)
nodes/fragment/9/node = SubResource("VisualShaderNodeColorParameter_h1fb8")
nodes/fragment/9/position = Vector2(-120, 380)
nodes/fragment/11/node = SubResource("VisualShaderNodeStep_u7na4")
nodes/fragment/11/position = Vector2(-400, 460)
nodes/fragment/15/node = SubResource("VisualShaderNodeFloatParameter_3jpth")
nodes/fragment/15/position = Vector2(-2900, 700)
nodes/fragment/16/node = SubResource("VisualShaderNodeExpression_2calb")
nodes/fragment/16/position = Vector2(-2340, 720)
nodes/fragment/16/size = Vector2(724.789, 654.559)
nodes/fragment/16/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/16/output_ports = "0,0,Dither_Node;"
nodes/fragment/16/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/32/node = SubResource("VisualShaderNodeFloatFunc_gvayx")
nodes/fragment/32/position = Vector2(0, 740)
nodes/fragment/33/node = SubResource("VisualShaderNodeMix_pifcj")
nodes/fragment/33/position = Vector2(380, 620)
nodes/fragment/34/node = SubResource("VisualShaderNodeTexture2DParameter_ljemy")
nodes/fragment/34/position = Vector2(-1260, 660)
nodes/fragment/35/node = SubResource("VisualShaderNodeTexture_c807e")
nodes/fragment/35/position = Vector2(-720, 760)
nodes/fragment/36/node = SubResource("VisualShaderNodeUVFunc_g0kx6")
nodes/fragment/36/position = Vector2(-920, 1020)
nodes/fragment/37/node = SubResource("VisualShaderNodeFloatConstant_n2jf0")
nodes/fragment/37/position = Vector2(-1220, 1060)
nodes/fragment/38/node = SubResource("VisualShaderNodeCurveTexture_bik3t")
nodes/fragment/38/position = Vector2(194.401, 891.927)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 2, 7, 0, 16, 0, 15, 0, 16, 1, 11, 0, 32, 0, 9, 0, 33, 1, 34, 0, 35, 2, 36, 0, 35, 0, 37, 0, 36, 1, 35, 0, 11, 1, 2, 0, 11, 0, 33, 0, 0, 0, 2, 0, 33, 0, 32, 0, 38, 0, 38, 0, 33, 2)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_trilb"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("VisualShader_f12d4")
shader_parameter/Main_color = Color(0.862034, 0.724161, 0.560019, 1)
shader_parameter/t_render = ExtResource("1_sep4e")

[sub_resource type="BoxMesh" id="BoxMesh_8e2mh"]
size = Vector3(1, 1, 1.075)

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_hmdwg"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0.125, 0.125, 0.125, 0.125), 2, Quaternion(0.5, 0.5, 0.5, 0.5)]
op_type = 5

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_nkxwk"]
parameter_name = "ColorParameter"
default_value_enabled = true
default_value = Color(0.027451, 0.14902, 0.156863, 1)

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_i727x"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_snpqm"]
constant = 1.0

[sub_resource type="Gradient" id="Gradient_3rj5j"]

[sub_resource type="GradientTexture2D" id="GradientTexture2D_6a54q"]
gradient = SubResource("Gradient_3rj5j")
fill_from = Vector2(0, 1)
fill_to = Vector2(0, 0)

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_xe0um"]
texture = SubResource("GradientTexture2D_6a54q")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_eq5xp"]

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_g8sai"]
parameter_name = "active_Dither"
qualifier = 1

[sub_resource type="VisualShaderNodeSwitch" id="VisualShaderNodeSwitch_mnow5"]
default_input_values = [0, false, 1, Vector3(1, 1, 1), 2, Vector3(0, 0, 0)]
op_type = 4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_8tisx"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_h702a"]
parameter_name = "light_color"
default_value = Color(0.401313, 0.399257, 0, 1)

[sub_resource type="VisualShader" id="VisualShader_drhdi"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

uniform vec4 ColorParameter : source_color = vec4(0.027451, 0.149020, 0.156863, 1.000000);
uniform vec4 light_color : source_color;
global uniform bool active_Dither;
global uniform float Dither_size;
uniform sampler2D tex_frg_21;



void fragment() {
// ColorParameter:14
	vec4 n_out14p0 = ColorParameter;


// ColorParameter:9
	vec4 n_out9p0 = light_color;


// BooleanParameter:24
	bool n_out24p0 = active_Dither;


// FloatConstant:2
	float n_out2p0 = 1.000000;


// FloatParameter:15
	float n_out15p0 = Dither_size;


	float n_out3p0;
// Expression:3
	n_out3p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out15p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out3p0 = n_out2p0 - DITHER_THRESHOLDS[index];
	}


// Texture2D:21
	vec4 n_out21p0 = texture(tex_frg_21, UV);


// Step:22
	float n_out22p0 = step(n_out3p0, n_out21p0.x);


	vec3 n_out25p0;
// Switch:25
	n_out25p0 = mix(vec3(n_out21p0.xyz), vec3(n_out22p0), float(n_out24p0));


// Mix:13
	vec4 n_out13p0 = mix(n_out14p0, n_out9p0, vec4(n_out25p0, 0.0));


// Output:0
	ALBEDO = vec3(n_out13p0.xyz);


}
"
graph_offset = Vector2(-910.054, -314.97)
flags/unshaded = true
nodes/vertex/0/position = Vector2(400, 160)
nodes/fragment/2/node = SubResource("VisualShaderNodeFloatConstant_snpqm")
nodes/fragment/2/position = Vector2(-1880, 620)
nodes/fragment/3/node = SubResource("VisualShaderNodeExpression_8tisx")
nodes/fragment/3/position = Vector2(-1600, 620)
nodes/fragment/3/size = Vector2(724.789, 654.559)
nodes/fragment/3/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/3/output_ports = "0,0,Dither_Node;"
nodes/fragment/3/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/9/node = SubResource("VisualShaderNodeColorParameter_h702a")
nodes/fragment/9/position = Vector2(-1197.08, -441.685)
nodes/fragment/13/node = SubResource("VisualShaderNodeMix_hmdwg")
nodes/fragment/13/position = Vector2(-77.0765, -61.6854)
nodes/fragment/14/node = SubResource("VisualShaderNodeColorParameter_nkxwk")
nodes/fragment/14/position = Vector2(-1197.08, -661.685)
nodes/fragment/15/node = SubResource("VisualShaderNodeFloatParameter_i727x")
nodes/fragment/15/position = Vector2(-2240, 780)
nodes/fragment/21/node = SubResource("VisualShaderNodeTexture_xe0um")
nodes/fragment/21/position = Vector2(-1540, 220)
nodes/fragment/22/node = SubResource("VisualShaderNodeStep_eq5xp")
nodes/fragment/22/position = Vector2(-940, 260)
nodes/fragment/24/node = SubResource("VisualShaderNodeBooleanParameter_g8sai")
nodes/fragment/24/position = Vector2(-1120, -20)
nodes/fragment/25/node = SubResource("VisualShaderNodeSwitch_mnow5")
nodes/fragment/25/position = Vector2(-760, 60)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 0, 15, 0, 3, 1, 21, 0, 22, 1, 3, 0, 22, 0, 24, 0, 25, 0, 21, 0, 25, 2, 22, 0, 25, 1, 25, 0, 13, 2, 9, 0, 13, 1, 14, 0, 13, 0, 13, 0, 0, 0)
nodes/light/0/position = Vector2(2440, 1640)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lopb6"]
render_priority = 0
shader = SubResource("VisualShader_drhdi")
shader_parameter/ColorParameter = Color(0.359103, 0.299902, 0.22719, 1)
shader_parameter/light_color = Color(0.495033, 0.42228, 0.332829, 1)

[sub_resource type="PlaneMesh" id="PlaneMesh_l1221"]
resource_local_to_scene = true

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_shisn"]
constant = 1.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_y3hi8"]
size = Vector2(724.789, 654.559)
expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_fdada"]
parameter_name = "Dither_size"
qualifier = 1

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_qmaqj"]
default_input_values = [0, 0.83, 1, 0.0]

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_w2suj"]
constant = Color(0.73, 0.47377, 0.1606, 1)

[sub_resource type="VisualShader" id="VisualShader_tl2py"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;

global uniform float Dither_size;



void fragment() {
// ColorConstant:7
	vec4 n_out7p0 = vec4(0.730000, 0.473770, 0.160600, 1.000000);


// FloatConstant:3
	float n_out3p0 = 1.000000;


// FloatParameter:5
	float n_out5p0 = Dither_size;


	float n_out4p0;
// Expression:4
	n_out4p0 = 0.0;
	{
		const float DITHER_THRESHOLDS[16] ={
				1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
				13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
				4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
				16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
			};
			
		vec2 uv = FRAGCOORD.xy * n_out5p0;
		int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
		n_out4p0 = n_out3p0 - DITHER_THRESHOLDS[index];
	}


// Step:6
	float n_in6p0 = 0.83000;
	float n_out6p0 = step(n_in6p0, n_out4p0);


// Output:0
	ALBEDO = vec3(n_out7p0.xyz);
	ALPHA = n_out6p0;


}
"
graph_offset = Vector2(-573.321, -129.617)
flags/unshaded = true
nodes/fragment/0/position = Vector2(580, 220)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_shisn")
nodes/fragment/3/position = Vector2(-1180, 460)
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_y3hi8")
nodes/fragment/4/position = Vector2(-900, 460)
nodes/fragment/4/size = Vector2(724.789, 654.559)
nodes/fragment/4/input_ports = "0,0,In;1,0,Size;"
nodes/fragment/4/output_ports = "0,0,Dither_Node;"
nodes/fragment/4/expression = "const float DITHER_THRESHOLDS[16] ={
		1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,
		13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,
		4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,
		16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0
	};
	
vec2 uv = FRAGCOORD.xy * Size;
int index = (int(uv.x) % 4) * 4 + int(uv.y) % 4;
Dither_Node = In - DITHER_THRESHOLDS[index];"
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatParameter_fdada")
nodes/fragment/5/position = Vector2(-1540, 620)
nodes/fragment/6/node = SubResource("VisualShaderNodeStep_qmaqj")
nodes/fragment/6/position = Vector2(130.23, 516.22)
nodes/fragment/7/node = SubResource("VisualShaderNodeColorConstant_w2suj")
nodes/fragment/7/position = Vector2(226.136, 51.1274)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 0, 5, 0, 4, 1, 4, 0, 6, 1, 6, 0, 0, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_gfhbg"]
render_priority = 0
shader = SubResource("VisualShader_tl2py")

[node name="Photo_element_root" type="Node3D"]

[node name="Photo" type="Node3D" parent="."]
transform = Transform3D(1.30166, 0, 0, 0, 1.30166, 0, 0, 0, 1.30166, 1.89189e-07, -3.95626e-06, -6.48852e-06)

[node name="IMG" type="MeshInstance3D" parent="Photo"]
transform = Transform3D(0.0725886, 0, 0, 0, -3.17295e-09, 0.0725886, 0, -0.0725886, -3.17295e-09, 0, 0.0026472, 0.003)
mesh = SubResource("QuadMesh_1i4du")
skeleton = NodePath("../..")
surface_material_override/0 = SubResource("ShaderMaterial_trilb")

[node name="render_base" type="MeshInstance3D" parent="Photo"]
transform = Transform3D(0.08478, 0, 0, 0, 0.00135893, 0, 0, 0, 0.0810078, 0, 0.00166521, 0.00384115)
mesh = SubResource("BoxMesh_8e2mh")
skeleton = NodePath("../..")
surface_material_override/0 = SubResource("ShaderMaterial_lopb6")

[node name="All_over" type="Node3D" parent="."]
transform = Transform3D(1.30165, 0, 0.00608897, 0, 1.30166, 0, -0.00608897, 0, 1.30165, -0.000246989, 0.00516491, 0.0386208)

[node name="On_Over_full" type="MeshInstance3D" parent="All_over"]
transform = Transform3D(0.0483738, 0, -0.000343184, 0, 0.0421626, 0, 0.000341957, 0, 0.0485471, 0.000714424, -0.00282692, -0.0259122)
visible = false
layers = 2
mesh = SubResource("PlaneMesh_l1221")
skeleton = NodePath("../../..")
surface_material_override/0 = SubResource("ShaderMaterial_gfhbg")
